#include <QDateTime>
#include <QDateTimeEdit>
#include <QMessageBox>
#include <QAbstractItemModel>
#include <QStandardItemModel>
#include <QItemSelectionModel>
#include <QtDebug>
#include <QHeaderView>

#include <KKSObjectExemplar.h>
#include <KKSObject.h>
#include <KKSCategory.h>
#include <KKSCategoryAttr.h>
#include <KKSAttrType.h>
#include <KKSAttrValue.h>
#include <KKSValue.h>
#include <KKSAttrType.h>
#include <KKSCheckableModel.h>

#include "messageform.h"
#include "ui_message_form.h"
#include "defines.h"

MessageForm :: MessageForm (const QMap<int, QString>& positions, const QMap<int, QString>& urgencyLevels, bool isCreate, QWidget *parent, Qt::WFlags f)
    : QDialog (parent, f),
    UI (new Ui::message_widget),
    messageEIO (0)
{
    UI->setupUi (this);
    UI->tvReceiver->setSelectionMode (QAbstractItemView::ExtendedSelection);
    UI->tvReceiver->setSelectionBehavior (QAbstractItemView::SelectRows);
    UI->tvReceiver->header ()->setStretchLastSection (true);

    this->initReceivers (positions);
    for (QMap<int, QString>::const_iterator p = urgencyLevels.constBegin(); \
            p != urgencyLevels.constEnd(); \
            ++p)
        UI->cbUrgency->addItem (p.value(), p.key());

    UI->cbUrgency->setCurrentIndex (0);

    UI->lInsertDB->setVisible (!isCreate);
    UI->dTEInserted->setVisible (!isCreate);

    if(isCreate){
        UI->leInputNumber->setText(tr("Will autogenerated on creation"));
        UI->leOutputNumber->setText(tr("Will autogenerated on creation"));
    }

    UI->lSender->setVisible (!isCreate);
    UI->lESender->setVisible (!isCreate);
    UI->lSendTime->setVisible (!isCreate);
    UI->dTESend->setVisible (!isCreate);
    UI->lRecvTime->setVisible (!isCreate);
    UI->dTERecv->setVisible (!isCreate);
    UI->lReadTime->setVisible (!isCreate);
    UI->dTERead->setVisible (!isCreate);

    connect (UI->tEMessageBody, SIGNAL (textChanged()), this, SLOT (setMessageBody()) );
    connect (UI->tbDocument, SIGNAL (clicked()), this, SLOT (loadDocument()) );
    connect (UI->cbUrgency, SIGNAL (activated(int)), this, SLOT (urgencyChanged (int)) );
    connect (UI->dTESend, SIGNAL (dateTimeChanged (const QDateTime &)), this, SLOT (setSendTime (const QDateTime&)) );
    connect (UI->tbAddReceiver, SIGNAL (clicked()), this, SLOT (loadReceiver()) );
    connect (UI->tbAddMailList, SIGNAL (clicked()), this, SLOT (addMailList()) );
    connect (UI->tbSetMailList, SIGNAL (clicked()), this, SLOT (setMailList()) );
    connect (UI->tbClearMailList, SIGNAL (clicked()), this, SLOT (clearMailList()) );
     //UI->dTESend->setDateTime (QDateTime::currentDateTime ());

    UI->pbOk->setVisible (isCreate);
    if (!isCreate)
        UI->pbCancel->setText (tr("&Close"));
    connect (UI->pbOk, SIGNAL (clicked()), this, SLOT (constructMessage()) );
    connect (UI->pbCancel, SIGNAL (clicked()), this, SLOT (reject()) );
}

MessageForm :: ~MessageForm (void)
{
    if (messageEIO)
        messageEIO->release ();

    attrVals.clear ();
    delete UI;
}

KKSObjectExemplar * MessageForm :: getMessage (void) const
{
    return messageEIO;
}

void MessageForm :: setMessage (KKSObjectExemplar * meio)
{
    if (messageEIO)
        messageEIO->release ();

    messageEIO = meio;

    if (messageEIO)
    {
        messageEIO->addRef ();
        attrVals = messageEIO->attrValues();
    }
    else
        attrVals.clear ();
}

const KKSList<KKSAttrValue *>& MessageForm :: attrValues() const
{
    return attrVals;
}

KKSList<KKSAttrValue *>& MessageForm :: attrValues (void)
{
    return attrVals;
}

void MessageForm :: setValues (const KKSList<KKSAttrValue *>& vals)
{
    attrVals = vals;
}

void MessageForm :: constructMessage (void)
{
    if (!messageEIO)
        return;

    if (UI->tEMessageBody->toPlainText().isEmpty())
    {
        QMessageBox::warning (this, tr ("Message"), tr ("Set message text"), QMessageBox::Ok, QMessageBox::NoButton);
        return;
    }

    if (getReceivers().isEmpty())
    {
        QMessageBox::warning (this, tr ("Message"), tr ("Set message receiver"), QMessageBox::Ok, QMessageBox::NoButton);
        return;
    }
//    messageEIO->setAttrValues (attrVals);
    this->accept ();
}

void MessageForm :: loadDocument (void)
{
    QString tableName ("io_objects");
    int attrId (ATTR_ID_IO_OBJECT);
    emit loadReference (tableName, UI->lEDocument, attrId);
}

void MessageForm :: loadReceiver (void)
{
    QString tableName ("position");
    //QString attrCode ("id_dl_receiver");
    QAbstractItemModel * recvModel = UI->tvReceiver->model ();
    if (!recvModel)
    {
        QMessageBox::warning (this, tr ("Message form"), tr ("Set model into receivers"), QMessageBox::Ok, QMessageBox::NoButton);
        return;
    }
    emit addReceiver (tableName, recvModel, ATTR_ID_DL_RECEIVER);
}

void MessageForm :: setMessageBody (void)
{
    KKSValue body (UI->tEMessageBody->toPlainText (), KKSAttrType::atText);
    messageEIO->attrValue (ATTR_MESSAGE_BODY)->setValue (body);
//    attrVals[4]->setValue (body);
}

void MessageForm :: setMessageBody (const QString & messBody)
{
    UI->tEMessageBody->setPlainText(messBody);
}

void MessageForm :: setSendTime (const QDateTime& datetime)
{
    KKSValue dtVal (QVariant (datetime).toString(), KKSAttrType::atDateTime);
    messageEIO->attrValue (ATTR_SENT_DATETIME)->setValue (dtVal);
//    attrVals[8]->setValue (dtVal);
}

void MessageForm :: setSentTime (const QDateTime& datetime)
{
    UI->dTESend->setDateTime(datetime);
    if (!datetime.isValid())
    {
        UI->lSendTime->setVisible (false);
        UI->dTESend->setVisible (false);
    }
}

void MessageForm :: setReadTime (const QDateTime& datetime)
{
    UI->dTERead->setDateTime(datetime);
    if (!datetime.isValid())
    {
        UI->lReadTime->setVisible (false);
        UI->dTERead->setVisible (false);
    }
}

void MessageForm :: setInsertTime (const QDateTime& datetime)
{
    UI->dTEInserted->setDateTime(datetime);
    if (!datetime.isValid())
    {
        UI->lInsertDB->setVisible (false);
        UI->dTEInserted->setVisible (false);
    }
}

void MessageForm :: setReceiveTime (const QDateTime& datetime)
{
    UI->dTERecv->setDateTime (datetime);
    if (!datetime.isValid())
    {
        UI->lRecvTime->setVisible (false);
        UI->dTERecv->setVisible (false);
    }
}

void MessageForm :: setDocumentName (const QString& ioName)
{
    UI->lEDocument->setText (ioName);
}

void MessageForm :: setSenderName (const QString& senderName)
{
    UI->lESender->setText (senderName);
}

KKSAttrValue * MessageForm :: getInputNumber(void) const
{
    if (!messageEIO || !messageEIO->attrValue (ATTR_INPUT_NUMBER))
        return 0;

    return messageEIO->attrValue (ATTR_INPUT_NUMBER);
}

void MessageForm :: setInputNumber(const QString& inputNumber)
{
    UI->leInputNumber->setText (inputNumber);
}

KKSAttrValue * MessageForm :: getOutputNumber(void) const
{
    if (!messageEIO || !messageEIO->attrValue (ATTR_OUTPUT_NUMBER))
        return 0;

    return messageEIO->attrValue (ATTR_OUTPUT_NUMBER);
}

void MessageForm :: setOutputNumber(const QString& outputNumber)
{
    UI->leOutputNumber->setText (outputNumber);
}

void MessageForm :: initReceivers (const QMap<int, QString>& pos)
{
    QAbstractItemModel *recvModel = new KKSCheckableModel  (pos.count(), 1);
    recvModel->setHeaderData (0, Qt::Horizontal, tr ("Receivers"), Qt::DisplayRole);
    int i=0;
    for (QMap<int, QString>::const_iterator pe = pos.constBegin(); pe != pos.constEnd(); ++pe)
    {
        QModelIndex wIndex = recvModel->index (i, 0);
        recvModel->setData (wIndex, pe.key(), Qt::UserRole);
        recvModel->setData (wIndex, pe.value(), Qt::DisplayRole);
        recvModel->setData (wIndex, false, Qt::CheckStateRole);
        i++;
    }
    UI->tvReceiver->setModel (recvModel);
}

void MessageForm :: urgencyChanged (int index)
{
    KKSValue val (QString::number (UI->cbUrgency->itemData (index).toInt()), KKSAttrType::atList);
    messageEIO->attrValue (ATTR_ID_URGENCY_LEVEL)->setValue (val);
}

QList<int> MessageForm :: getReceivers (void) const
{
    QAbstractItemModel * recvModel = UI->tvReceiver->model ();
    if (!recvModel)
        return QList<int>();

    QList<int> results;
    for (int i=0; i<recvModel->rowCount(); i++)
    {
        QModelIndex wIndex = recvModel->index (i, 0);//selIndexes[i];
        if (wIndex.data (Qt::CheckStateRole).toBool())
            results.append (wIndex.data (Qt::UserRole).toInt());
    }

    return results;
}

void MessageForm :: selectReceiver (int idRecv)
{
    QAbstractItemModel * recvModel = UI->tvReceiver->model ();
    if (!recvModel)
        return;

    bool isSelected (false);
    for (int i=0; i<recvModel->rowCount() && !isSelected; i++)
    {
        QModelIndex wIndex = recvModel->index (i, 0);
        if (wIndex.data (Qt::UserRole).toInt() == idRecv)
        {
            recvModel->setData (wIndex, true, Qt::CheckStateRole);
            isSelected = true;
        }
    }
}

void MessageForm :: setUrgency (int idUrgency)
{
    int index = UI->cbUrgency->findData (idUrgency);
    if (index >= 0)
        UI->cbUrgency->setCurrentIndex (index);
}

void MessageForm :: addMailList (void)
{
    QAbstractItemModel * mailModel = UI->tvReceiver->model ();
    if (!mailModel)
    {
        QMessageBox::warning (this, tr ("Message form"), tr ("Set model into executors"), QMessageBox::Ok, QMessageBox::NoButton);
        return;
    }
    emit loadReceivers (mailModel);
}

void MessageForm :: setMailList (void)
{
    this->clearMailList ();
    this->addMailList ();
}

void MessageForm :: clearMailList (void)
{
    this->clearReceivers ();
}

void MessageForm :: setReceivers (const QMap<int, QString>& recList)
{
    this->clearReceivers ();
    this->initReceivers (recList);
}

void MessageForm :: clearReceivers (void)
{
    QAbstractItemModel * recvModel = UI->tvReceiver->model ();
    if (recvModel && recvModel->rowCount() > 0)
    {
        int nr = recvModel->rowCount();
        recvModel->removeRows (0, nr);
    }
}
